/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: InternalProtocol.proto */

#ifndef PROTOBUF_C_InternalProtocol_2eproto__INCLUDED
#define PROTOBUF_C_InternalProtocol_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct InternalProtocol__InternalClient InternalProtocol__InternalClient;
typedef struct InternalProtocol__InternalServer InternalProtocol__InternalServer;
typedef struct InternalProtocol__DeviceConnect InternalProtocol__DeviceConnect;
typedef struct InternalProtocol__DeviceConnectResponse InternalProtocol__DeviceConnectResponse;
typedef struct InternalProtocol__DeviceStatus InternalProtocol__DeviceStatus;
typedef struct InternalProtocol__DeviceCommand InternalProtocol__DeviceCommand;
typedef struct InternalProtocol__Device InternalProtocol__Device;


/* --- enums --- */

/*
 **
 * Indicates if connection was successful or which error occurred
 */
typedef enum _InternalProtocol__DeviceConnectResponse__ResponseType {
  /*
   **
   * Connection successful
   */
  INTERNAL_PROTOCOL__DEVICE_CONNECT_RESPONSE__RESPONSE_TYPE__OK = 0,
  /*
   **
   * Device with given name is already connected
   */
  INTERNAL_PROTOCOL__DEVICE_CONNECT_RESPONSE__RESPONSE_TYPE__ALREADY_CONNECTED = 1,
  /*
   **
   * Module server does not support given module
   */
  INTERNAL_PROTOCOL__DEVICE_CONNECT_RESPONSE__RESPONSE_TYPE__MODULE_NOT_SUPPORTED = 2,
  /*
   **
   * Module loaded by module server does not recognize given device type
   */
  INTERNAL_PROTOCOL__DEVICE_CONNECT_RESPONSE__RESPONSE_TYPE__DEVICE_NOT_SUPPORTED = 3,
  /*
   **
   * Device of the same deviceType with higher priority is already connected
   */
  INTERNAL_PROTOCOL__DEVICE_CONNECT_RESPONSE__RESPONSE_TYPE__HIGHER_PRIORITY_ALREADY_CONNECTED = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERNAL_PROTOCOL__DEVICE_CONNECT_RESPONSE__RESPONSE_TYPE)
} InternalProtocol__DeviceConnectResponse__ResponseType;
/*
 * Enum for specification to which module the messages should be forwarded by internal server.
 * Must mirror the enum number in InternalProtocol.proto
 * RESERVED_MODULE is default module taking control of unspecified messages.
 */
typedef enum _InternalProtocol__Device__Module {
  /*
   **
   * This is reserved place for a control module, which is default for devices that didn't set correct module
   * It may serve for messages that are not aggregated. TODO will be implemented
   */
  INTERNAL_PROTOCOL__DEVICE__MODULE__RESERVED_MODULE = 0,
  /*
   * Sending missions with the information about the route and stops to the autonomy
   */
  INTERNAL_PROTOCOL__DEVICE__MODULE__MISSION_MODULE = 1,
  /*
   * Control of car accessories
   */
  INTERNAL_PROTOCOL__DEVICE__MODULE__CAR_ACCESSORY_MODULE = 2,
  INTERNAL_PROTOCOL__DEVICE__MODULE__EXAMPLE_MODULE = 999
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERNAL_PROTOCOL__DEVICE__MODULE)
} InternalProtocol__Device__Module;

/* --- messages --- */

typedef enum {
  INTERNAL_PROTOCOL__INTERNAL_CLIENT__MESSAGE_TYPE__NOT_SET = 0,
  INTERNAL_PROTOCOL__INTERNAL_CLIENT__MESSAGE_TYPE_DEVICE_CONNECT = 1,
  INTERNAL_PROTOCOL__INTERNAL_CLIENT__MESSAGE_TYPE_DEVICE_STATUS = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERNAL_PROTOCOL__INTERNAL_CLIENT__MESSAGE_TYPE__CASE)
} InternalProtocol__InternalClient__MessageTypeCase;

struct  InternalProtocol__InternalClient
{
  ProtobufCMessage base;
  InternalProtocol__InternalClient__MessageTypeCase message_type_case;
  union {
    InternalProtocol__DeviceConnect *deviceconnect;
    InternalProtocol__DeviceStatus *devicestatus;
  };
};
#define INTERNAL_PROTOCOL__INTERNAL_CLIENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&internal_protocol__internal_client__descriptor) \
    , INTERNAL_PROTOCOL__INTERNAL_CLIENT__MESSAGE_TYPE__NOT_SET, {0} }


typedef enum {
  INTERNAL_PROTOCOL__INTERNAL_SERVER__MESSAGE_TYPE__NOT_SET = 0,
  INTERNAL_PROTOCOL__INTERNAL_SERVER__MESSAGE_TYPE_DEVICE_CONNECT_RESPONSE = 1,
  INTERNAL_PROTOCOL__INTERNAL_SERVER__MESSAGE_TYPE_DEVICE_COMMAND = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INTERNAL_PROTOCOL__INTERNAL_SERVER__MESSAGE_TYPE__CASE)
} InternalProtocol__InternalServer__MessageTypeCase;

struct  InternalProtocol__InternalServer
{
  ProtobufCMessage base;
  InternalProtocol__InternalServer__MessageTypeCase message_type_case;
  union {
    InternalProtocol__DeviceConnectResponse *deviceconnectresponse;
    InternalProtocol__DeviceCommand *devicecommand;
  };
};
#define INTERNAL_PROTOCOL__INTERNAL_SERVER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&internal_protocol__internal_server__descriptor) \
    , INTERNAL_PROTOCOL__INTERNAL_SERVER__MESSAGE_TYPE__NOT_SET, {0} }


/*
 **
 * Device connect information.
 * Device connect message is used for establishing connection from module client to module server
 * send as first message from module client to module server
 */
struct  InternalProtocol__DeviceConnect
{
  ProtobufCMessage base;
  InternalProtocol__Device *device;
};
#define INTERNAL_PROTOCOL__DEVICE_CONNECT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&internal_protocol__device_connect__descriptor) \
    , NULL }


/*
 **
 * Device connect response information.
 * Device connect response message is used for establishing connection from module client to module server
 * send as response to deviceConnect message from module server to module client
 */
struct  InternalProtocol__DeviceConnectResponse
{
  ProtobufCMessage base;
  InternalProtocol__DeviceConnectResponse__ResponseType responsetype;
  InternalProtocol__Device *device;
};
#define INTERNAL_PROTOCOL__DEVICE_CONNECT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&internal_protocol__device_connect_response__descriptor) \
    , INTERNAL_PROTOCOL__DEVICE_CONNECT_RESPONSE__RESPONSE_TYPE__OK, NULL }


struct  InternalProtocol__DeviceStatus
{
  ProtobufCMessage base;
  InternalProtocol__Device *device;
  ProtobufCBinaryData statusdata;
};
#define INTERNAL_PROTOCOL__DEVICE_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&internal_protocol__device_status__descriptor) \
    , NULL, {0,NULL} }


/*
 * binary command data
 */
struct  InternalProtocol__DeviceCommand
{
  ProtobufCMessage base;
  InternalProtocol__Device *device;
  ProtobufCBinaryData commanddata;
};
#define INTERNAL_PROTOCOL__DEVICE_COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&internal_protocol__device_command__descriptor) \
    , NULL, {0,NULL} }


/*
 * Identification of a device. Only devices with unique module-deviceType-dataProvider combination can be connected.
 */
struct  InternalProtocol__Device
{
  ProtobufCMessage base;
  /*
   **
   * Serves for internal client to forward message to the correct module.
   */
  InternalProtocol__Device__Module module;
  /*
   * Device type is module implementation dependent, it is recommended to implement as enumeration.
   */
  uint32_t devicetype;
  /*
   **
   * name of role that the device provides, serves for distinction of devices
   * important in device connection, where only single device of a deviceRole type can be connected to a module.
   */
  char *devicerole;
  /*
   * device name
   */
  char *devicename;
  /*
   * Priority of the device. Max priority = 0
   */
  uint32_t priority;
};
#define INTERNAL_PROTOCOL__DEVICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&internal_protocol__device__descriptor) \
    , INTERNAL_PROTOCOL__DEVICE__MODULE__RESERVED_MODULE, 0, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0 }


/* InternalProtocol__InternalClient methods */
void   internal_protocol__internal_client__init
                     (InternalProtocol__InternalClient         *message);
size_t internal_protocol__internal_client__get_packed_size
                     (const InternalProtocol__InternalClient   *message);
size_t internal_protocol__internal_client__pack
                     (const InternalProtocol__InternalClient   *message,
                      uint8_t             *out);
size_t internal_protocol__internal_client__pack_to_buffer
                     (const InternalProtocol__InternalClient   *message,
                      ProtobufCBuffer     *buffer);
InternalProtocol__InternalClient *
       internal_protocol__internal_client__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   internal_protocol__internal_client__free_unpacked
                     (InternalProtocol__InternalClient *message,
                      ProtobufCAllocator *allocator);
/* InternalProtocol__InternalServer methods */
void   internal_protocol__internal_server__init
                     (InternalProtocol__InternalServer         *message);
size_t internal_protocol__internal_server__get_packed_size
                     (const InternalProtocol__InternalServer   *message);
size_t internal_protocol__internal_server__pack
                     (const InternalProtocol__InternalServer   *message,
                      uint8_t             *out);
size_t internal_protocol__internal_server__pack_to_buffer
                     (const InternalProtocol__InternalServer   *message,
                      ProtobufCBuffer     *buffer);
InternalProtocol__InternalServer *
       internal_protocol__internal_server__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   internal_protocol__internal_server__free_unpacked
                     (InternalProtocol__InternalServer *message,
                      ProtobufCAllocator *allocator);
/* InternalProtocol__DeviceConnect methods */
void   internal_protocol__device_connect__init
                     (InternalProtocol__DeviceConnect         *message);
size_t internal_protocol__device_connect__get_packed_size
                     (const InternalProtocol__DeviceConnect   *message);
size_t internal_protocol__device_connect__pack
                     (const InternalProtocol__DeviceConnect   *message,
                      uint8_t             *out);
size_t internal_protocol__device_connect__pack_to_buffer
                     (const InternalProtocol__DeviceConnect   *message,
                      ProtobufCBuffer     *buffer);
InternalProtocol__DeviceConnect *
       internal_protocol__device_connect__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   internal_protocol__device_connect__free_unpacked
                     (InternalProtocol__DeviceConnect *message,
                      ProtobufCAllocator *allocator);
/* InternalProtocol__DeviceConnectResponse methods */
void   internal_protocol__device_connect_response__init
                     (InternalProtocol__DeviceConnectResponse         *message);
size_t internal_protocol__device_connect_response__get_packed_size
                     (const InternalProtocol__DeviceConnectResponse   *message);
size_t internal_protocol__device_connect_response__pack
                     (const InternalProtocol__DeviceConnectResponse   *message,
                      uint8_t             *out);
size_t internal_protocol__device_connect_response__pack_to_buffer
                     (const InternalProtocol__DeviceConnectResponse   *message,
                      ProtobufCBuffer     *buffer);
InternalProtocol__DeviceConnectResponse *
       internal_protocol__device_connect_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   internal_protocol__device_connect_response__free_unpacked
                     (InternalProtocol__DeviceConnectResponse *message,
                      ProtobufCAllocator *allocator);
/* InternalProtocol__DeviceStatus methods */
void   internal_protocol__device_status__init
                     (InternalProtocol__DeviceStatus         *message);
size_t internal_protocol__device_status__get_packed_size
                     (const InternalProtocol__DeviceStatus   *message);
size_t internal_protocol__device_status__pack
                     (const InternalProtocol__DeviceStatus   *message,
                      uint8_t             *out);
size_t internal_protocol__device_status__pack_to_buffer
                     (const InternalProtocol__DeviceStatus   *message,
                      ProtobufCBuffer     *buffer);
InternalProtocol__DeviceStatus *
       internal_protocol__device_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   internal_protocol__device_status__free_unpacked
                     (InternalProtocol__DeviceStatus *message,
                      ProtobufCAllocator *allocator);
/* InternalProtocol__DeviceCommand methods */
void   internal_protocol__device_command__init
                     (InternalProtocol__DeviceCommand         *message);
size_t internal_protocol__device_command__get_packed_size
                     (const InternalProtocol__DeviceCommand   *message);
size_t internal_protocol__device_command__pack
                     (const InternalProtocol__DeviceCommand   *message,
                      uint8_t             *out);
size_t internal_protocol__device_command__pack_to_buffer
                     (const InternalProtocol__DeviceCommand   *message,
                      ProtobufCBuffer     *buffer);
InternalProtocol__DeviceCommand *
       internal_protocol__device_command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   internal_protocol__device_command__free_unpacked
                     (InternalProtocol__DeviceCommand *message,
                      ProtobufCAllocator *allocator);
/* InternalProtocol__Device methods */
void   internal_protocol__device__init
                     (InternalProtocol__Device         *message);
size_t internal_protocol__device__get_packed_size
                     (const InternalProtocol__Device   *message);
size_t internal_protocol__device__pack
                     (const InternalProtocol__Device   *message,
                      uint8_t             *out);
size_t internal_protocol__device__pack_to_buffer
                     (const InternalProtocol__Device   *message,
                      ProtobufCBuffer     *buffer);
InternalProtocol__Device *
       internal_protocol__device__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   internal_protocol__device__free_unpacked
                     (InternalProtocol__Device *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*InternalProtocol__InternalClient_Closure)
                 (const InternalProtocol__InternalClient *message,
                  void *closure_data);
typedef void (*InternalProtocol__InternalServer_Closure)
                 (const InternalProtocol__InternalServer *message,
                  void *closure_data);
typedef void (*InternalProtocol__DeviceConnect_Closure)
                 (const InternalProtocol__DeviceConnect *message,
                  void *closure_data);
typedef void (*InternalProtocol__DeviceConnectResponse_Closure)
                 (const InternalProtocol__DeviceConnectResponse *message,
                  void *closure_data);
typedef void (*InternalProtocol__DeviceStatus_Closure)
                 (const InternalProtocol__DeviceStatus *message,
                  void *closure_data);
typedef void (*InternalProtocol__DeviceCommand_Closure)
                 (const InternalProtocol__DeviceCommand *message,
                  void *closure_data);
typedef void (*InternalProtocol__Device_Closure)
                 (const InternalProtocol__Device *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor internal_protocol__internal_client__descriptor;
extern const ProtobufCMessageDescriptor internal_protocol__internal_server__descriptor;
extern const ProtobufCMessageDescriptor internal_protocol__device_connect__descriptor;
extern const ProtobufCMessageDescriptor internal_protocol__device_connect_response__descriptor;
extern const ProtobufCEnumDescriptor    internal_protocol__device_connect_response__response_type__descriptor;
extern const ProtobufCMessageDescriptor internal_protocol__device_status__descriptor;
extern const ProtobufCMessageDescriptor internal_protocol__device_command__descriptor;
extern const ProtobufCMessageDescriptor internal_protocol__device__descriptor;
extern const ProtobufCEnumDescriptor    internal_protocol__device__module__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_InternalProtocol_2eproto__INCLUDED */
