/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: modules/MissionModule.proto */

#ifndef PROTOBUF_C_modules_2fMissionModule_2eproto__INCLUDED
#define PROTOBUF_C_modules_2fMissionModule_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct MissionModule__AutonomyStatus MissionModule__AutonomyStatus;
typedef struct MissionModule__AutonomyStatus__Telemetry MissionModule__AutonomyStatus__Telemetry;
typedef struct MissionModule__AutonomyCommand MissionModule__AutonomyCommand;
typedef struct MissionModule__AutonomyError MissionModule__AutonomyError;
typedef struct MissionModule__Station MissionModule__Station;
typedef struct MissionModule__Position MissionModule__Position;


/* --- enums --- */

/*
 **
 * Current state of the Car.
 */
typedef enum _MissionModule__AutonomyStatus__State {
  /*
   **
   * Car is in IDLE mode. Waiting for CarCommand message receive.
   * This state assume that the CarStatus::telemetry::speed is zero!
   */
  MISSION_MODULE__AUTONOMY_STATUS__STATE__IDLE = 0,
  /*
   **
   * Car is driving (to the target stop).
   */
  MISSION_MODULE__AUTONOMY_STATUS__STATE__DRIVE = 1,
  /*
   **
   * Car is in the specified stop. It does not imply that the car is IDLE.
   * This state assume that the CarStatus::telemetry::speed is zero!
   */
  MISSION_MODULE__AUTONOMY_STATUS__STATE__IN_STOP = 2,
  /*
   **
   * There is an Obstacle which will cause collision if not removed.
   * The transition from this state to another is defined by The Autonomy implementation.
   */
  MISSION_MODULE__AUTONOMY_STATUS__STATE__OBSTACLE = 3,
  /*
   **
   * Car is in an error state.
   * State reflects that the car is in critical condition and needs an assistance.
   * The transition from this state to another is defined by The Autonomy implementation.
   */
  MISSION_MODULE__AUTONOMY_STATUS__STATE__ERROR = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MISSION_MODULE__AUTONOMY_STATUS__STATE)
} MissionModule__AutonomyStatus__State;
/*
 **
 * Action which the autonomy must take.
 * Received action has an immediate effect to the state of the car (CarStatus::state)
 * @see MissionStatus::State
 */
typedef enum _MissionModule__AutonomyCommand__Action {
  /*
   **
   * No action performed. Used as a default value.
   * Does not interact with CarCommand::stops logic.
   */
  MISSION_MODULE__AUTONOMY_COMMAND__ACTION__NO_ACTION = 0,
  /*
   **
   * Stop The car!
   * Independent on content of CarCommands::stops
   */
  MISSION_MODULE__AUTONOMY_COMMAND__ACTION__STOP = 1,
  /*
   **
   * Start the car!
   * If there are stops in CarCommands::stops the car shall start driving to the next stop.
   */
  MISSION_MODULE__AUTONOMY_COMMAND__ACTION__START = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(MISSION_MODULE__AUTONOMY_COMMAND__ACTION)
} MissionModule__AutonomyCommand__Action;

/* --- messages --- */

struct  MissionModule__AutonomyStatus__Telemetry
{
  ProtobufCMessage base;
  /*
   **
   * vehicle speed in [m/s]
   * - positive value implies Forward car moving,
   * - negative value implies Backward car moving,
   * - zero value implies that the car stays at a place.
   */
  double speed;
  /*
   **
   * Fuel of the car in percents.
   * - 0.0 means empty battery or tank,
   * - 1.0 means full battery or tank.
   * Interpolation between 0.0 and 1.0 must be linear!
   */
  double fuel;
  /*
   **
   * Car position in the global map (WGS84)
   */
  MissionModule__Position *position;
};
#define MISSION_MODULE__AUTONOMY_STATUS__TELEMETRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mission_module__autonomy_status__telemetry__descriptor) \
    , 0, 0, NULL }


/*
 * Message sent by the autonomy, containing its telemetry information, state and next destination
 */
struct  MissionModule__AutonomyStatus
{
  ProtobufCMessage base;
  /*
   * Information about the car position, speed and fuel level
   */
  MissionModule__AutonomyStatus__Telemetry *telemetry;
  /*
   **
   * Current state. If not set Car is in the IDLE state!
   */
  MissionModule__AutonomyStatus__State state;
  /*
   **
   * Name of the stop as specified in CarCommand::stops.
   * will not be defined if there is no station in the mission
   */
  MissionModule__Station *nextstop;
};
#define MISSION_MODULE__AUTONOMY_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mission_module__autonomy_status__descriptor) \
    , NULL, MISSION_MODULE__AUTONOMY_STATUS__STATE__IDLE, NULL }


/*
 * Command for the autonomy, containing Action and list of destinations where the autonomy should go.
 */
struct  MissionModule__AutonomyCommand
{
  ProtobufCMessage base;
  /*
   **
   * List of stops where the car shall go. Car goes from one stop to another following the order specified by the list.
   * May be empty
   */
  size_t n_stops;
  MissionModule__Station **stops;
  /*
   **
   * Name of the route, that the autonomy will follow
   */
  char *route;
  MissionModule__AutonomyCommand__Action action;
};
#define MISSION_MODULE__AUTONOMY_COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mission_module__autonomy_command__descriptor) \
    , 0,NULL, (char *)protobuf_c_empty_string, MISSION_MODULE__AUTONOMY_COMMAND__ACTION__NO_ACTION }


/*
 * Autonomy error message containing list of Stops that the autonomy has finished.
 * The server marks the stops of a mission as finished based on this list.
 */
struct  MissionModule__AutonomyError
{
  ProtobufCMessage base;
  /*
   **
   * All stops, which were finished, when the server has been down
   */
  size_t n_finishedstops;
  MissionModule__Station **finishedstops;
};
#define MISSION_MODULE__AUTONOMY_ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mission_module__autonomy_error__descriptor) \
    , 0,NULL }


/*
 **
 * Stop on the route.
 */
struct  MissionModule__Station
{
  ProtobufCMessage base;
  /*
   **
   * The name of the station.
   */
  char *name;
  /*
   **
   * Position of the station
   */
  MissionModule__Position *position;
};
#define MISSION_MODULE__STATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mission_module__station__descriptor) \
    , (char *)protobuf_c_empty_string, NULL }


/*
 * GPS position
 */
struct  MissionModule__Position
{
  ProtobufCMessage base;
  /*
   **
   * WGS84 latitude,
   */
  double latitude;
  /*
   **
   * WGS84 longitude
   */
  double longitude;
  /*
   **
   * altitude in [m]
   */
  double altitude;
};
#define MISSION_MODULE__POSITION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&mission_module__position__descriptor) \
    , 0, 0, 0 }


/* MissionModule__AutonomyStatus__Telemetry methods */
void   mission_module__autonomy_status__telemetry__init
                     (MissionModule__AutonomyStatus__Telemetry         *message);
/* MissionModule__AutonomyStatus methods */
void   mission_module__autonomy_status__init
                     (MissionModule__AutonomyStatus         *message);
size_t mission_module__autonomy_status__get_packed_size
                     (const MissionModule__AutonomyStatus   *message);
size_t mission_module__autonomy_status__pack
                     (const MissionModule__AutonomyStatus   *message,
                      uint8_t             *out);
size_t mission_module__autonomy_status__pack_to_buffer
                     (const MissionModule__AutonomyStatus   *message,
                      ProtobufCBuffer     *buffer);
MissionModule__AutonomyStatus *
       mission_module__autonomy_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mission_module__autonomy_status__free_unpacked
                     (MissionModule__AutonomyStatus *message,
                      ProtobufCAllocator *allocator);
/* MissionModule__AutonomyCommand methods */
void   mission_module__autonomy_command__init
                     (MissionModule__AutonomyCommand         *message);
size_t mission_module__autonomy_command__get_packed_size
                     (const MissionModule__AutonomyCommand   *message);
size_t mission_module__autonomy_command__pack
                     (const MissionModule__AutonomyCommand   *message,
                      uint8_t             *out);
size_t mission_module__autonomy_command__pack_to_buffer
                     (const MissionModule__AutonomyCommand   *message,
                      ProtobufCBuffer     *buffer);
MissionModule__AutonomyCommand *
       mission_module__autonomy_command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mission_module__autonomy_command__free_unpacked
                     (MissionModule__AutonomyCommand *message,
                      ProtobufCAllocator *allocator);
/* MissionModule__AutonomyError methods */
void   mission_module__autonomy_error__init
                     (MissionModule__AutonomyError         *message);
size_t mission_module__autonomy_error__get_packed_size
                     (const MissionModule__AutonomyError   *message);
size_t mission_module__autonomy_error__pack
                     (const MissionModule__AutonomyError   *message,
                      uint8_t             *out);
size_t mission_module__autonomy_error__pack_to_buffer
                     (const MissionModule__AutonomyError   *message,
                      ProtobufCBuffer     *buffer);
MissionModule__AutonomyError *
       mission_module__autonomy_error__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mission_module__autonomy_error__free_unpacked
                     (MissionModule__AutonomyError *message,
                      ProtobufCAllocator *allocator);
/* MissionModule__Station methods */
void   mission_module__station__init
                     (MissionModule__Station         *message);
size_t mission_module__station__get_packed_size
                     (const MissionModule__Station   *message);
size_t mission_module__station__pack
                     (const MissionModule__Station   *message,
                      uint8_t             *out);
size_t mission_module__station__pack_to_buffer
                     (const MissionModule__Station   *message,
                      ProtobufCBuffer     *buffer);
MissionModule__Station *
       mission_module__station__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mission_module__station__free_unpacked
                     (MissionModule__Station *message,
                      ProtobufCAllocator *allocator);
/* MissionModule__Position methods */
void   mission_module__position__init
                     (MissionModule__Position         *message);
size_t mission_module__position__get_packed_size
                     (const MissionModule__Position   *message);
size_t mission_module__position__pack
                     (const MissionModule__Position   *message,
                      uint8_t             *out);
size_t mission_module__position__pack_to_buffer
                     (const MissionModule__Position   *message,
                      ProtobufCBuffer     *buffer);
MissionModule__Position *
       mission_module__position__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   mission_module__position__free_unpacked
                     (MissionModule__Position *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*MissionModule__AutonomyStatus__Telemetry_Closure)
                 (const MissionModule__AutonomyStatus__Telemetry *message,
                  void *closure_data);
typedef void (*MissionModule__AutonomyStatus_Closure)
                 (const MissionModule__AutonomyStatus *message,
                  void *closure_data);
typedef void (*MissionModule__AutonomyCommand_Closure)
                 (const MissionModule__AutonomyCommand *message,
                  void *closure_data);
typedef void (*MissionModule__AutonomyError_Closure)
                 (const MissionModule__AutonomyError *message,
                  void *closure_data);
typedef void (*MissionModule__Station_Closure)
                 (const MissionModule__Station *message,
                  void *closure_data);
typedef void (*MissionModule__Position_Closure)
                 (const MissionModule__Position *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor mission_module__autonomy_status__descriptor;
extern const ProtobufCMessageDescriptor mission_module__autonomy_status__telemetry__descriptor;
extern const ProtobufCEnumDescriptor    mission_module__autonomy_status__state__descriptor;
extern const ProtobufCMessageDescriptor mission_module__autonomy_command__descriptor;
extern const ProtobufCEnumDescriptor    mission_module__autonomy_command__action__descriptor;
extern const ProtobufCMessageDescriptor mission_module__autonomy_error__descriptor;
extern const ProtobufCMessageDescriptor mission_module__station__descriptor;
extern const ProtobufCMessageDescriptor mission_module__position__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_modules_2fMissionModule_2eproto__INCLUDED */
